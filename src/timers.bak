

export class AppTimer {
    timerType: "up" | "down";
    duration: number;
    startTime: number;
    outputNumber: number;
    lastResetOutput: number;
    hasReset: boolean;
    formattedOutput: string;
    formatttedLastReset: string;
    formattedDuration: string;
    lastUpdate: number;
    isPaused: boolean;
    showMilliseconds: boolean;
    myTimer: Timer;

    constructor(duration?: number) {
        this.duration = duration ?? -1;
        if (this.duration == -1) {
            this.timerType = "down";
        } else {
            this.timerType = "up";
        }
        this.outputNumber = new Date().getTime();
        this.startTime = new Date().getTime();
        this.lastResetOutput = 0
        this.hasReset = false;
        this.formattedOutput = "00:00";
        this.formatttedLastReset = "00:00";
        if (this.duration == -1) {
            this.formattedDuration = "n/a";
        } else {
            this.formattedDuration = this.formatTime(this.duration);
        }
        this.lastUpdate = new Date().getTime();
        this.isPaused = true;
        this.showMilliseconds = false;
        this.myTimer = 0;
    }

    beginTimer() {
        this.isPaused = false;
        this.startTime = new Date().getTime();
        this.lastUpdate = this.startTime;
        this.myTimer = setInterval(() => { this.updateTimer() }, 1000);
    }

    updateTimer(): void {
        const timeDelta = new Date().getTime() - this.lastUpdate;
        this.lastUpdate = new Date().getTime();
        if (this.timerType == "up") {
            this.countUp(timeDelta);
        } else {
            this.countDown(timeDelta);
        }
        this.formattedOutput = this.formatTime(this.outputNumber);
    }

    countUp(delta: number): void {
        this.outputNumber += delta;
    }

    countDown(delta: number): void {
        this.outputNumber -= delta;
    }

    resetTimer(): void {
        this.hasReset = true;
        this.lastResetOutput = this.outputNumber;
        this.outputNumber = 0;
        this.formattedOutput = this.formatTime(this.outputNumber);
        this.formatttedLastReset = this.formatTime(this.lastResetOutput);
        this.startTime = new Date().getTime();
    }


    // This function is used to format the time into a string
    // It is a much more verbose way to do this, but it is easy to read
    formatTime(time: number): string {
        const minutes = Math.floor(time / 60000);
        const seconds = ((time % 60000) / 1000);
        const milliseconds = ((time % 60000) % 1000);
        let returnString: string = "";
        // Add our minutes to the return string
        if (minutes < 10) {
            returnString += "0";
        }
        returnString += minutes.toString();
        returnString += ":";
        // Add our seconds to the return string
        if (seconds < 10) {
            returnString += "0";
        }
        returnString += seconds.toFixed(0);
        // Add our milliseconds to the return string
        if (this.showMilliseconds) {
            returnString += ".";
            if (milliseconds < 100) {
                returnString += "0";
            }
            if (milliseconds < 10) {
                returnString += "0";
            }
            returnString += milliseconds.toFixed(0);
        }
        return returnString;
    }
}

